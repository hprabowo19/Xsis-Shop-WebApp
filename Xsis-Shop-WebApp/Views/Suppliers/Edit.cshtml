@model Xsis_Shop_ViewModels.SupplierViewModel

@{
    ViewBag.Title = "Suppliers";
    ViewBag.Subtitle = "Edit";
    ViewBag.SelectedSuppliers = "active toggled";
}

<div class="block-header">
    <h2>@ViewBag.Subtitle Supplier</h2>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-body card-padding">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <form role="form">
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.CompanyName, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.ContactName, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.ContactName, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ContactName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.ContactTitle, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.ContactTitle, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ContactTitle, "", new { @class = "text-danger" })
                </div>
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.City, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.Country, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.Phone, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
                <div class="form-group fg-float">
                    <div class="fg-line">
                        @Html.LabelFor(model => model.Fax, new { @class = "fg-label" })
                        @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control fg-input" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })
                </div>
                <button type="submit" class="btn bgm-teal m-t-10">Save</button>
                @Html.ActionLink("Back to List", "Index", null, new { @class = "pull-right btn bgm-bluegray m-t-10" })
            </form>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
